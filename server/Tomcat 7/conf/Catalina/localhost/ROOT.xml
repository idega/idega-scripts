<Context 
	path="" 
	docBase="ROOT" 
	reloadable="false" 
	debug="0" >
	
	<!--
	========================= Resource options =============================
	name:   The name of the resource to be created, 
			relative to the java:comp/env context.
	
	description:    Optional, human-readable description of this resource.
	
	type:   The fully qualified Java class name expected by the web 
			application when it performs a lookup for this resource.
	
	auth:   Specify whether the web Application code signs on to the 
			corresponding resource manager programatically, 
			or whether the Container will sign on to the resource manager 
			on behalf of the application. The value of this attribute 
			must be Application or Container. This attribute is required if 
			the web application will use a <resource-ref> element in the 
			web application deployment descriptor, but is optional 
			if the application uses a <resource-env-ref> instead.
	
	===================== Basic Pool Configuration =========================
	acquireIncrement:       
			Determines how many connections at a time c3p0 will try to
			acquire when the pool is exhausted.
	
	maxPoolSize:
			Maximum number of Connections a pool will maintain at any 
			given time.
	
	minPoolSize:
			Minimum number of Connections a pool will maintain at any 
			given time.
	
	maxIdleTime:
			Seconds a Connection can remain pooled but unused before being 
			discarded. Zero means idle connections never expire.

	=============== Managing Pool Size and Connection Age ==================
	maxConnectionAge:
			Seconds, effectively a time to live. A Connection older than 
			maxConnectionAge will be destroyed and purged from the pool. 
			This differs from maxIdleTime in that it refers to absolute age.
			Even a Connection which has not been much idle will be purged 
			from the pool if it exceeds maxConnectionAge. Zero means no 
			maximum absolute age is enforced.
	
	maxIdleTimeExcessConnections:
			Number of seconds that Connections in excess of minPoolSize 
			should be permitted to remain idle in the pool before being 
			culled. Intended for applications that wish to aggressively 
			minimize the number of open Connections, shrinking the pool 
			back towards minPoolSize if, following a spike, the load level 
			diminishes and Connections acquired are no longer needed. 
			If maxIdleTime is set, maxIdleTimeExcessConnections should be 
			smaller if the parameter is to have any effect. Zero means no 
			enforcement, excess Connections are not idled out. 
	
	=================== Configuring Connection Testing =====================
	testConnectionOnCheckout:
			If true, an operation will be performed at every connection 
			checkout to verify that the connection is valid. Be sure to set 
			an efficient preferredTestQuery or automaticTestTable if you set 
			this to true. Performing the (expensive) default Connection test 
			on every client checkout will harm client performance. Testing 
			Connections in checkout is the simplest and most reliable form 
			of Connection testing, but for better performance, consider 
			verifying connections periodically using idleConnectionTestPeriod.
	
	preferredTestQuery:
			Defines the query that will be executed for all connection 
			tests, if the default ConnectionTester (or some other 
			implementation of QueryConnectionTester, or better yet 
			FullQueryConnectionTester) is being used. Defining a 
			preferredTestQuery that will execute quickly in your database 
			may dramatically speed up Connection tests. (If no 
			preferredTestQuery is set, the default ConnectionTester executes 
			a getTables() call on the Connection's DatabaseMetaData. 
			Depending on your database, this may execute more slowly than a 
			"normal" database query.) NOTE: The table against which your 
			preferredTestQuery will be run must exist in the database schema 
			prior to your initialization of your DataSource. If your 
			application defines its own schema, try automaticTestTable 
			instead.

	============== Configuring Recovery From Database Outages ==============
	acquireRetryAttempts:
			Defines how many times c3p0 will try to acquire a new Connection 
			from the database before giving up. If this value is less than 
			or equal to zero, c3p0 will keep trying to fetch a Connection 
			indefinitely.
	
	acquireRetryDelay:
			Milliseconds, time c3p0 will wait between acquire attempts.
	
	breakAfterAcquireFailure:
			If true, a pooled DataSource will declare itself broken and be 
			permanently closed if a Connection cannot be obtained from the 
			database after making acquireRetryAttempts to acquire one. 
			If false, failure to obtain a Connection will cause all Threads 
			waiting for the pool to acquire a Connection to throw an 
			Exception, but the DataSource will remain valid, and will 
			attempt to acquire again following a call to getConnection().
	
	============= Configuring Unresolved Transaction Handling ==============
	autoCommitOnClose:
			The JDBC spec is unforgivably silent on what should happen to 
			unresolved, pending transactions on Connection close. 
			C3P0's default policy is to rollback any uncommitted, pending 
			work. (I think this is absolutely, undeniably the right policy, 
			but there is no consensus among JDBC driver vendors.) Setting 
			autoCommitOnClose to true causes uncommitted pending work to be 
			committed, rather than rolled back on Connection close. 
			[Note: Since the spec is absurdly unclear on this question, 
			application authors who wish to avoid bugs and inconsistent 
			behavior should ensure that all transactions are explicitly 
			either committed or rolled-back before close is called.]
	
	==== Configuring to Debug and Workaround Broken Client Applications ====
	debugUnreturnedConnectionStackTraces:
			If true, and if unreturnedConnectionTimeout is set to a positive 
			value, then the pool will capture the stack trace 
			(via an Exception) of all Connection checkouts, and the stack 
			traces will be printed when unreturned checked-out 
			Connections timeout. This is intended to debug applications with 
			Connection leaks, that is applications that occasionally fail to 
			return Connections, leading to pool growth, and eventually 
			exhaustion (when the pool hits maxPoolSize with all Connections 
			checked-out and lost). This parameter should only be set while 
			debugging, as capturing the stack trace will slow down every 
			Connection check-out.

	unreturnedConnectionTimeout:
			Seconds. If set, if an application checks out but then fails to 
			check-in [i.e. close()] a Connection within the specified period 
			of time, the pool will unceremoniously destroy() the Connection. 
			This permits applications with occasional Connection leaks to 
			survive, rather than eventually exhausting the Connection pool. 
			And that's a shame. Zero means no timeout, applications are 
			expected to close() their own Connections. Obviously, if a 
			non-zero value is set, it should be to a value longer than any 
			Connection should reasonably be checked-out. Otherwise, the pool 
			will occasionally kill Connections in active use, which is bad. 
			This is basically a bad idea, but it's a commonly requested 
			feature. Fix your $%!@% applications so they don't leak 
			Connections! Use this temporarily in combination with 
			debugUnreturnedConnectionStackTraces to figure out where 
			Connections are being checked-out that don't make it back into 
			the pool!
	-->
			
	<Resource 
		name="jdbc/DefaultDS"
		description="C3P0 pool"
		auth="Container"
		type="com.mchange.v2.c3p0.ComboPooledDataSource"
		
		acquireIncrement="3"
		maxPoolSize="1000"
		minPoolSize="10"
		maxIdleTime = "0"
		
		maxConnectionAge = "0"
		maxIdleTimeExcessConnections = "0"
		
		testConnectionOnCheckout = "true"
		idleConnectionTestPeriod = "300"
		preferredTestQuery = "SELECT 1"
		
		acquireRetryAttempts = "0"
		acquireRetryDelay = "1000"
		breakAfterAcquireFailure = "false"
		
		autoCommitOnClose="true"
		
		user="felix"
		password="f3l1x"
		jdbcUrl="jdbc:mysql://10.160.50.23:3306/production_felix?autoReconnect=true"
		driverClass="com.mysql.jdbc.Driver"
		factory="org.apache.naming.factory.BeanFactory"/>
</Context>
